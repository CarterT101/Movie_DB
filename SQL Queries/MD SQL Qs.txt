Basic Queries:
# Retrieve all the titles and release dates of movies released in 2015.
# Find the average runtime of all movies in the database.
# Display the top 10 highest-grossing movies of all time, ordered by revenue in descending order.
Count the number of movies in each genre.
# List the titles and vote averages of all movies with a vote count of over 1000.

Filtering and Sorting:
# Find movies that have both "Action" and "Adventure" genres.
# Retrieve movies released in the last 10 years, sorted by popularity.
# List the titles and release dates of movies with a runtime between 90 and 120 minutes.
# Find movies with a vote average of at least 8.0, released in the USA, and have a budget of less than $50 million.
# Identify movies that are currently in the "Released" status and have a tagline containing the word "love".

Aggregations:
# For each production company, list the number of movies they have produced.
# Calculate the total revenue generated by movies in each language.
# Find the average vote count for movies in each genre, released in each year.
List the top 5 production countries with the highest average revenue per movie.

# MIGHT NEED TO DO ANOTHER PYTHON QUERY TO 'production_countries' column
https://www.postgresqltutorial.com/postgresql-tutorial/postgresql-json/

Text Search and Pattern Matching:
	16	Search for movies whose titles contain the word "Batman".
	17	Find movies with overviews that mention "time travel".
	18	Retrieve movies whose taglines start with "In a world where...".
Remember:
	•	Use appropriate keywords like SELECT, FROM, WHERE, ORDER BY, GROUP BY, HAVING, JOIN, LIKE, etc.
	•	Employ comparison operators (=, <, >, <=, >=, !=), logical operators (AND, OR, NOT), and functions (e.g., AVG, COUNT, SUM, MAX, MIN) as needed.
	•	Test your queries thoroughly to ensure they produce the expected results.

Advanced Queries:

Write a query to find the longest movie in each genre, considering both runtime and release date.
Identify movies that were critically acclaimed (high vote average) but commercially unsuccessful (low revenue).
Use subqueries to find movies that had higher revenue than all other movies with the same release year.
Create a new view that shows the most popular movie for each production company.
Calculate the percentage of movies with a budget exceeding $100 million in each decade.
Window Functions:

Rank movies by their popularity within each genre.
Identify movies with a higher vote average than the average vote average for their release year.
Find the first and last movie released in each country.
Calculate the cumulative revenue generated by movies throughout the years.
Partition movies by genre and calculate the top 3 highest-grossing movies within each genre.
Bonus Challenges:

Implement a search function that allows users to filter movies by various criteria like genre, release year, popularity, etc.
Calculate the return on investment (ROI) for each movie, considering its budget and revenue.
Analyze the correlation between release date, budget, and revenue to understand factors influencing a movie's success.